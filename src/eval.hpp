#ifndef EVAL_HPP_
#define EVAL_HPP_

#include "position.hpp"
#include <memory>

class Evaluator {
public:
  Evaluator(std::shared_ptr<Position> position_ptr);
  int evaluate() const;

private:
  int piece_evaluation(const Colors side, const Pieces piece) const;
  int material_evaluation(const Pieces piece, const bitboard bb) const;
  int pst_evaluation(const Colors side, const Pieces piece, bitboard bb) const; 
  std::shared_ptr<Position> pos;
  
  ///////////////////////////////////////
  /******* MATERIAL VALUE TABLES *******/
  ///////////////////////////////////////
  static constexpr int MATERIAL_VALUE[NPIECES] = {
      100,  // PAWN
      310,  // KNIGHT
      330,  // BISHOP
      500,  // ROOK
      800,  // QUEEN
      20000 // KING
  };

  ///////////////////////////////////////
  /******** PIECE SQUARE TABLES ********/
  ///////////////////////////////////////
  Square static constexpr BSQUARE_TO_WSQUARE =(Square) 56;
  static constexpr int PST[NPIECES][NSQUARES] = {
      { // PAWN
       0,  0,  0,   0,  0,  0,   0,  0,
       5,  10, 10, -20, -20, 10, 10, 5,
       5,  -5, -10, 0,  0,  -10, -5, 5,
       0,  0,  0,  20,  20,  0,  0,  0,
       5,  5,  10,  25, 25, 10,  5,  5,  
       10, 10, 20, 30,  30,  20, 10, 10,
       50, 50, 50,  50, 50, 50,  50, 50, 
       0,  0,  0,  0,   0,   0,  0,  0
      },

      { // KNIGHT
       -50, -40, -30, -30, -30, -30, -40, -50,
       -40, -20, 0, 5,   5, 0, -20, -40,
       -30, 5, 10, 15, 15,  10,  5, -30,
       -30, 0, 15, 20, 20,  15,  0,   -30,
       -30, 5,   15,  20,  20,  15,  5, -30,
       -30, 0,   10,  15,  15,  10,  0,   -30,
       -40, -20, 0,   0, 0,   0,   -20, -40,
       -50, -40, -30, -30, -30, -30, -40, -50
      },

      { // BISHOP
       -20, -10, -10, -10, -10, -10, -10, -20,
       -10, 5,   0,   0,   0,0,   5,   -10,
       -10, 10,  10,  10,  10,  10,  10,  -10,
       -10, 0, 10,  10,  10,  10,  0,   -10,
       -10, 5,   5,   10,  10,  5,   5, -10,
       -10, 0,   5,   10,  10,  5,   0,   -10,
       -10, 0,   0,   0,0,   0,   0,   -10,
       -20, -10, -10, -10, -10, -10, -10, -20,
      },

      { // ROOK
       0,  0,  0,  5,  5,  0,  0,  0,
       - 5,0, 0, 0, 0, 0, 0, -5, 
       -5,0,  0,  0,  0,  0,  0,  -5, 
       -5, 0, 0, 0, 0, 0, 0, -5, 
       -5,0,  0,  0,  0,  0,  0,  -5,
       -5,0, 0, 0, 0, 0, 0, -5, 
       5, 10, 10, 10, 10, 10, 10, 5,  
       0, 0, 0, 0, 0, 0, 0, 0,
      },

      { // QUEEN
       -20, -10, -10, -5,  -5,  -10, -10, -20,
       - 10, 0,   5,   0,   0, 0, 0,   -10, 
       -10,  5,   5,   5,   5,   5,        0,   -10, 
       0, 0, 5, 5,   5,   5,   0,   -5,  
       -5, 0,   5, 5,   5,   5,   0, -5, 
       -10, 0,   5,   5,   5,   5,   0,   -10,      
       -10, 0,   0,   0, 0,0,   0,   -10, 
       -20,-10, -10, -5,  -5,       -10, -10, -20,
      },

      { // KING
       20,  30,  10,  0,   0,   10,  30,  20,  
       20,  20,  0,   0,   0, 0,   20,  20,  
       -10, -20, -20, -20, -20, -20, -20, -10, 
       -20, -30,  -30, -40, -40, -30, -30, -20, 
       -30, -40, -40, -50, -50, -40, -40, -30, 
       -30, -40, -40, -50, -50, -40, -40, -30, 
       -30, -40, -40, -50, -50, -40, -40, -30, 
       -30, -40, -40, -50, -50, -40, -40, -30,
      }
  };
};

#endif
